import tkinter as tk
from tkinter import messagebox
import sqlite3

# Function to create the database table if it doesn't exist
def create_table():
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS data (id TEXT PRIMARY KEY, name TEXT, age INTEGER)''')
    conn.commit()
    conn.close()

# Function to insert data into the database
def insert_data(id, name, age):
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    try:
        c.execute('''INSERT INTO data (id, name, age) VALUES (?, ?, ?)''', (id, name, age))
        conn.commit()
        messagebox.showinfo("Success", "Data added successfully.")
    except sqlite3.IntegrityError:
        messagebox.showerror("Error", "ID already exists. Please use a different ID.")
    conn.close()

# Function to display data from the database
def display_data():
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    c.execute('''SELECT * FROM data''')
    data = c.fetchall()
    conn.close()
    return data

# Function to delete data from the database
def delete_data(id):
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    c.execute('''DELETE FROM data WHERE id = ?''', (id,))
    conn.commit()
    conn.close()

# Function to update data in the database
def update_data(id, name, age):
    conn = sqlite3.connect('example.db')
    c = conn.cursor()
    c.execute('''UPDATE data SET name = ?, age = ? WHERE id = ?''', (name, age, id))
    conn.commit()
    conn.close()

# Function to handle the "Add" button click event
def add_data():
    id = id_entry.get()
    name = name_entry.get()
    age = age_entry.get()
    if id.strip() == '' or name.strip() == '' or not age.isdigit():
        messagebox.showerror("Error", "Please enter valid data.")
    else:
        age = int(age)
        if age < 18 or age > 65:
            messagebox.showerror("Error", "Age should be between 18 and 65.")
        else:
            insert_data(id, name, age)
            id_entry.delete(0, tk.END)
            name_entry.delete(0, tk.END)
            age_entry.delete(0, tk.END)
            display_all_data()

# Function to handle the "Delete" button click event
def delete_selected():
    id = id_entry.get()
    if id.strip() == '':
        messagebox.showerror("Error", "Please enter the ID of the data to delete.")
    else:
        delete_data(id)
        messagebox.showinfo("Success", "Data deleted successfully.")
        id_entry.delete(0, tk.END)
        display_all_data()

# Function to handle the "Update" button click event
def update_selected():
    id = id_entry.get()
    name = name_entry.get()
    age = age_entry.get()
    if id.strip() == '' or name.strip() == '' or not age.isdigit():
        messagebox.showerror("Error", "Please enter valid data.")
    else:
        age = int(age)
        if age < 18 or age > 65:
            messagebox.showerror("Error", "Age should be between 18 and 65.")
        else:
            update_data(id, name, age)
            messagebox.showinfo("Success", "Data updated successfully.")
            id_entry.delete(0, tk.END)
            name_entry.delete(0, tk.END)
            age_entry.delete(0, tk.END)
            display_all_data()

# Function to display all data in the GUI
def display_all_data():
    result_text.config(state=tk.NORMAL)
    result_text.delete('1.0', tk.END)
    data = display_data()
    for row in data:
        result_text.insert(tk.END, f"ID: {row[0]}, Name: {row[1]}, Age: {row[2]}\n")
    result_text.config(state=tk.DISABLED)

# Create the database table
create_table()

# GUI setup
root = tk.Tk()
root.title("SQLite3 GUI Application")

# ID entry
id_label = tk.Label(root, text="ID:")
id_label.grid(row=0, column=0, padx=5, pady=5, sticky=tk.W)
id_entry = tk.Entry(root)
id_entry.grid(row=0, column=1, padx=5, pady=5)

# Name entry
name_label = tk.Label(root, text="Name:")
name_label.grid(row=1, column=0, padx=5, pady=5, sticky=tk.W)
name_entry = tk.Entry(root)
name_entry.grid(row=1, column=1, padx=5, pady=5)

# Age entry
age_label = tk.Label(root, text="Age:")
age_label.grid(row=2, column=0, padx=5, pady=5, sticky=tk.W)
age_entry = tk.Entry(root)
age_entry.grid(row=2, column=1, padx=5, pady=5)

# Add button
add_button = tk.Button(root, text="Add", command=add_data)
add_button.grid(row=3, column=0, padx=5, pady=5, sticky=tk.W+tk.E)

# Delete button
delete_button = tk.Button(root, text="Delete", command=delete_selected)
delete_button.grid(row=3, column=1, padx=5, pady=5, sticky=tk.W+tk.E)

# Update button
update_button = tk.Button(root, text="Update", command=update_selected)
update_button.grid(row=4, column=0, padx=5, pady=5, sticky=tk.W+tk.E)

# Display all data
display_button = tk.Button(root, text="Display All Data", command=display_all_data)
display_button.grid(row=4, column=1, padx=5, pady=5, sticky=tk.W+tk.E)

# Result text
result_text = tk.Text(root, width=40, height=10, state=tk.DISABLED)
result_text.grid(row=5, column=0, columnspan=2, padx=5, pady=5)

root.mainloop()
